
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nsyt1
 */
public class ABCdemo extends javax.swing.JFrame {
    SDHABC abc;
    ABCparam param;
    ABCpk pk;
    ABCsk sk;
    ABCcred cred;
    long setupT,issueT,proofT,anyT,andT,nanyT,nandT,setupTT,issueTT,proofTT,andTT,nandTT;
    long[] anyTT = new long[5];
    long[] nanyTT = new long[5];
    /**
     * Creates new form ABCdemo
     */
    public ABCdemo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        attrSizeText = new javax.swing.JTextField();
        SetupBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        IssueAttrText = new javax.swing.JTextField();
        IssueBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        PossessBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        anyThresholdText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        anyText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        anyLogicBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        nThresholdText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        nanyText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        nanyLogicBtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        andText = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        andLogicBtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        nandText = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        nandLogicBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        roundText = new javax.swing.JTextField();
        benchmarkBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SDHABC-256");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Setup"));

        jLabel1.setText("Attributes Size:");

        attrSizeText.setText("20");

        SetupBtn.setText("Setup");
        SetupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetupBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attrSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(SetupBtn))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(attrSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SetupBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Issuing"));

        jLabel2.setText("Attributes:");

        IssueAttrText.setText("a,b,c,d,e,f,g,h,i,j,z");

        IssueBtn.setText("Issue");
        IssueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IssueBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IssueAttrText, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(IssueBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(IssueAttrText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IssueBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Proofs"));

        PossessBtn.setText("Run");
        PossessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PossessBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("1. Proof of Possession:");

        jLabel4.setText("3. ANY(d=");

        anyThresholdText.setText("1");

        jLabel5.setText(", A'=");

        anyText.setText("a,b,c,d,e,f,g,h,i,j,y");

        jLabel6.setText("):");

        anyLogicBtn.setText("Run");
        anyLogicBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anyLogicBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("4. NANY(d=");

        nThresholdText.setText("1");

        jLabel8.setText(", A'=");

        nanyText.setText("k,l,m,n,o,p,q,r,s,t,a");

        jLabel9.setText("):");

        nanyLogicBtn.setText("Run");
        nanyLogicBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nanyLogicBtnActionPerformed(evt);
            }
        });

        jLabel11.setText("2. AND(A'=");

        andText.setText("a,b,c,d,e,f,g,h,i,j");

        jLabel12.setText("):");

        andLogicBtn.setText("Run");
        andLogicBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andLogicBtnActionPerformed(evt);
            }
        });

        jLabel13.setText("4. NAND(A'=");

        nandText.setText("k,l,m,n,o,p,q,r,s,t");

        jLabel14.setText("):");

        nandLogicBtn.setText("Run");
        nandLogicBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nandLogicBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anyThresholdText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anyText, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anyLogicBtn))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nThresholdText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nanyText, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nanyLogicBtn))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(andText))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PossessBtn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(andLogicBtn))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nandText, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nandLogicBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(PossessBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(andText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(andLogicBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(anyThresholdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(anyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(anyLogicBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(nandText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(nandLogicBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(nThresholdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(nanyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(nanyLogicBtn))
                .addGap(19, 19, 19))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Benchmark"));

        jLabel10.setText("Round:");

        roundText.setText("100");

        benchmarkBtn.setText("Benchmark");
        benchmarkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                benchmarkBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roundText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(benchmarkBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(roundText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(benchmarkBtn))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SetupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetupBtnActionPerformed
        // TODO add your handling code here:
        abc = new SDHABC();
        
        TextArea.append("Setup() starts....\n\n");
        setupT = System.nanoTime();
        param = abc.Setup(Integer.parseInt(attrSizeText.getText()));
        setupT = System.nanoTime() - setupT;
        
        pk=param.getPK();
        sk=param.getSK();
        
        TextArea.append("============================================\n");
        TextArea.append("Public Keys\n");
        TextArea.append("============================================\n");
        TextArea.append(pk.toString()+"\n");
        TextArea.append("============================================\n");
        TextArea.append("Secret Keys\n");
        TextArea.append("============================================\n");
        TextArea.append(sk.toString()+"\n");
        TextArea.append("Setup() completed in "+TimeUnit.MILLISECONDS.convert(setupT, TimeUnit.NANOSECONDS)+"ms.\n");          
    }//GEN-LAST:event_SetupBtnActionPerformed

    private void IssueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IssueBtnActionPerformed
        try {
            // TODO add your handling code here:
            TextArea.append("\nIssuing starts....\n");
            issueT = System.nanoTime();
            cred = abc.Issuing(pk, IssueAttrText.getText().split(","), sk);
            issueT = System.nanoTime() - issueT;
            
            TextArea.append("Issuing protocol: O(pk,A)<->I(pk,sk) completed in "+TimeUnit.MILLISECONDS.convert(issueT, TimeUnit.NANOSECONDS)+"ms.\n");
        } catch (Exception ex) {
            TextArea.append("Error: "+ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_IssueBtnActionPerformed

    private void PossessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PossessBtnActionPerformed
        // TODO add your handling code here:
        TextArea.append("\nProof of Possession starts....\n");
        proofT = System.nanoTime();
        boolean result = abc.proofOfPossession(pk, cred);
        proofT = System.nanoTime() - proofT;
        
        TextArea.append("Proof of possession protocol: P(pk,cred,nil)<->V(pk,nil) completed?\n" +result+", in "+TimeUnit.MILLISECONDS.convert(proofT, TimeUnit.NANOSECONDS)+"ms.\n");
    }//GEN-LAST:event_PossessBtnActionPerformed

    private void anyLogicBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anyLogicBtnActionPerformed
        // TODO add your handling code here:
        try{
        TextArea.append("\nANY proof starts....\n");
        anyT = System.nanoTime();
        boolean result = abc.proofOfANY(pk, cred, Integer.parseInt(anyThresholdText.getText()), anyText.getText().split(","));
        anyT = System.nanoTime() - anyT;
        
        TextArea.append("ANY proof: P(pk,cred,ANY(d,A'))<->V(pk,ANY(d,A')) completed?\n" +result+", in "+TimeUnit.MILLISECONDS.convert(anyT, TimeUnit.NANOSECONDS)+"ms.\n");
        }catch(Exception ex){
            TextArea.append("Fails: "+ex.getMessage()+"\n");
        }
    }//GEN-LAST:event_anyLogicBtnActionPerformed

    private void nanyLogicBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nanyLogicBtnActionPerformed
        // TODO add your handling code here:
        try{
        TextArea.append("\nNANY proof starts....\n");
        nanyT = System.nanoTime();
        boolean result = abc.proofOfNANY(pk, cred, Integer.parseInt(nThresholdText.getText()), nanyText.getText().split(","));
        nanyT = System.nanoTime() - nanyT;
        
        TextArea.append("NANY proof: P(pk,cred,NOTANY(d,A'))<->V(pk,NOTANY(d,A')) completed?\n" +result+", in "+TimeUnit.MILLISECONDS.convert(nanyT, TimeUnit.NANOSECONDS)+"ms.\n");
        }catch(Exception ex){
            TextArea.append("Fails: "+ex.getMessage()+"\n");
        }
    }//GEN-LAST:event_nanyLogicBtnActionPerformed

    private void benchmarkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_benchmarkBtnActionPerformed
            // TODO add your handling code here:
        String str = "",raw="";
        try{
            
            str+="Credential Size,Algorithm,Time (ms)\n";                
            for(int n=0;n<5;n++){
                raw+="Attribute size: "+((n+1)*50)+"\n";
                raw+="Round,issuing,possession,AND,OR,ANY(3),ANY(5),ANY(7),ANY(9),NAND,NOR,NANY(3),NANY(5),NANY(7),NANY(9)\n";
                
                int round = Integer.parseInt(roundText.getText());
                int warmup = (int) (round*0.1);                
                setupTT=issueTT=proofTT=andTT=nandTT=0;
                for(int i=0;i<anyTT.length;i++){
                    anyTT[i]=nanyTT[i]=0;
                }
                
                
                abc = new SDHABC();
                String attr="";
                
                    //temporary moved here for lesser time
                    //setupT = System.nanoTime();
                    param = abc.Setup(Integer.parseInt(attrSizeText.getText()));
                    //setupT = System.nanoTime() - setupT;
                    //if(i>warmup-1){
                    //    setupTT+=setupT;
                    //    raw+=setupT+",";
                    //}
                    
                for(int i=0;i<round+warmup;i++){
                    System.out.println(((n+1)*50)+":"+i);
                    raw+=(i+1)+",";
                    
                    //place setup here
                    
                    //end setup
                    

                    pk=param.getPK();
                    sk=param.getSK();
                    
                    attr = IssueAttrText.getText();
                    for(int k=IssueAttrText.getText().split(",").length;k<(n+1)*50;k++)
                        attr+=","+(k+1);
                    

                    issueT = System.nanoTime();
                    cred = abc.Issuing(pk, attr.split(","), sk);
                    issueT = System.nanoTime() - issueT;
                    if(i>warmup-1){
                        issueTT+=issueT;
                        raw+=issueT+",";
                    }

                    proofT = System.nanoTime();
                    boolean result = abc.proofOfPossession(pk, cred);
                    proofT = System.nanoTime() - proofT;
                    if(i>warmup-1){
                        proofTT+=proofT;
                        raw+=proofT+",";
                    }

                    
                    andT = System.nanoTime();
                    result = abc.proofOfAND(pk, cred, andText.getText().split(","));
                    andT = System.nanoTime() - andT;
                    if(i>warmup-1){
                        andTT+=andT;
                        raw+=andT+",";
                    }

                    for(int j=0;j<5;j++){
                        anyT = System.nanoTime();
                        result = abc.proofOfANY(pk, cred, (j*2)+1, anyText.getText().split(","));
                        anyT = System.nanoTime() - anyT;
                        if(i>warmup-1){
                            anyTT[j]+=anyT;
                            raw+=anyT+",";
                        }
                    }

                    nandT = System.nanoTime();
                    result = abc.proofOfNAND(pk, cred, nandText.getText().split(","));
                    nandT = System.nanoTime() - nandT;
                    if(i>warmup-1){
                        nandTT+=nandT;
                        raw+=nandT+",";
                    }

                    for(int j=0;j<5;j++){
                        nanyT = System.nanoTime();
                        result = abc.proofOfNANY(pk, cred, (j*2)+1, nanyText.getText().split(","));
                        nanyT = System.nanoTime() - nanyT;
                        if(i>warmup-1){
                            nanyTT[j]+=nanyT;
                            raw+=nanyT+",";
                        }
                    }
                    
                    raw+="\n";
                }
        
                TextArea.append("\nBenchmark of "+round+" rounds (excluding "+warmup+" rounds warm up) done.\n");
                TextArea.append("Setup took: "+TimeUnit.MILLISECONDS.convert(setupTT/round, TimeUnit.NANOSECONDS)+"ms.\n");
                str+=((n+1)*50)+",Issuing,"+TimeUnit.MILLISECONDS.convert(issueTT/round, TimeUnit.NANOSECONDS)+"\n";
                TextArea.append("Issuing for "+attr.split(",").length+" attributes took: "+TimeUnit.MILLISECONDS.convert(issueTT/round, TimeUnit.NANOSECONDS)+"ms.\n");
                str+=((n+1)*50)+",Possession,"+TimeUnit.MILLISECONDS.convert(proofTT/round, TimeUnit.NANOSECONDS)+"\n";
                TextArea.append("Proof of Possession took: "+TimeUnit.MILLISECONDS.convert(proofTT/round, TimeUnit.NANOSECONDS)+"ms.\n");
                TextArea.append("AND of |A'|="+andText.getText().split(",").length+" took: "+TimeUnit.MILLISECONDS.convert(andTT/round, TimeUnit.NANOSECONDS)+"ms.\n");
                for(int j=0;j<5;j++){
                    if(j==0){
                        str+=((n+1)*50)+",OR,"+TimeUnit.MILLISECONDS.convert(anyTT[j]/round, TimeUnit.NANOSECONDS)+"\n";
                        TextArea.append("OR took: "+TimeUnit.MILLISECONDS.convert(anyTT[j]/round, TimeUnit.NANOSECONDS)+"ms.\n");
                    }
                    else{
                        str+=((n+1)*50)+",ANY("+((j*2)+1)+"),"+TimeUnit.MILLISECONDS.convert(anyTT[j]/round, TimeUnit.NANOSECONDS)+"\n";
                        TextArea.append("ANY("+((j*2)+1)+",A') took: "+TimeUnit.MILLISECONDS.convert(anyTT[j]/round, TimeUnit.NANOSECONDS)+"ms.\n");
                    }
                }
                str+=((n+1)*50)+",AND,"+TimeUnit.MILLISECONDS.convert(andTT/round, TimeUnit.NANOSECONDS)+"\n";
                TextArea.append("NAND of |A'|="+nandText.getText().split(",").length+" took: "+TimeUnit.MILLISECONDS.convert(nandTT/round, TimeUnit.NANOSECONDS)+"ms.\n");
                for(int j=0;j<5;j++){
                    if(j==0){
                        str+=((n+1)*50)+",NOR,"+TimeUnit.MILLISECONDS.convert(nanyTT[j]/round, TimeUnit.NANOSECONDS)+"\n";                    
                        TextArea.append("NOR took: "+TimeUnit.MILLISECONDS.convert(nanyTT[j]/round, TimeUnit.NANOSECONDS)+"ms.\n");
                    }
                    else{
                        str+=((n+1)*50)+",NANY("+((j*2)+1)+"),"+TimeUnit.MILLISECONDS.convert(nanyTT[j]/round, TimeUnit.NANOSECONDS)+"\n";                    
                        TextArea.append("NANY("+((j*2)+1)+",A') took: "+TimeUnit.MILLISECONDS.convert(nanyTT[j]/round, TimeUnit.NANOSECONDS)+"ms.\n");
                    }
                }
                str+=((n+1)*50)+",NAND,"+TimeUnit.MILLISECONDS.convert(nandTT/round, TimeUnit.NANOSECONDS)+"\n";
                
            }
        }catch(Exception ex){
            TextArea.append("Error: "+ex.getLocalizedMessage()+"\n");
        }finally{
            try {
                FileOutputStream fos = new FileOutputStream(new File("rawdata.csv"));                
                fos.write(raw.getBytes());
                fos.flush();
                fos.close();
                fos = new FileOutputStream(new File("benchmark.csv"));                
                fos.write(str.getBytes());
                fos.flush();
                fos.close();
                fos = new FileOutputStream(new File("benchmark.txt"));                
                fos.write(TextArea.getText().getBytes());
                fos.flush();
                fos.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ABCdemo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ABCdemo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_benchmarkBtnActionPerformed

    private void andLogicBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andLogicBtnActionPerformed
        // TODO add your handling code here:
        try {
            TextArea.append("\nAND proof starts....\n");
            andT = System.nanoTime();
            boolean result = abc.proofOfAND(pk, cred, andText.getText().split(","));        
            andT = System.nanoTime() - andT;
        
            TextArea.append("AND proof: P(pk,cred,AND(A'))<->V(pk,AND(A')) completed?\n" +result+", in "+TimeUnit.MILLISECONDS.convert(andT, TimeUnit.NANOSECONDS)+"ms.\n");
        } catch (Exception ex) {
            TextArea.append("Fails: "+ex.getMessage()+"\n");
        }
    }//GEN-LAST:event_andLogicBtnActionPerformed

    private void nandLogicBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nandLogicBtnActionPerformed
        // TODO add your handling code here:
        try{
        TextArea.append("\nNAND proof starts....\n");
        nandT = System.nanoTime();
        boolean result = abc.proofOfNAND(pk, cred, nandText.getText().split(","));
        nandT = System.nanoTime() - nandT;
        
        TextArea.append("NAND proof: P(pk,cred,NAND(A'))<->V(pk,NAND(A')) completed?\n" +result+", in "+TimeUnit.MILLISECONDS.convert(nandT, TimeUnit.NANOSECONDS)+"ms.\n");
        }catch(Exception ex){
            TextArea.append("Fails: "+ex.getMessage()+"\n");
        }
    }//GEN-LAST:event_nandLogicBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ABCdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ABCdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ABCdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ABCdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ABCdemo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IssueAttrText;
    private javax.swing.JButton IssueBtn;
    private javax.swing.JButton PossessBtn;
    private javax.swing.JButton SetupBtn;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JButton andLogicBtn;
    private javax.swing.JTextField andText;
    private javax.swing.JButton anyLogicBtn;
    private javax.swing.JTextField anyText;
    private javax.swing.JTextField anyThresholdText;
    private javax.swing.JTextField attrSizeText;
    private javax.swing.JButton benchmarkBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nThresholdText;
    private javax.swing.JButton nandLogicBtn;
    private javax.swing.JTextField nandText;
    private javax.swing.JButton nanyLogicBtn;
    private javax.swing.JTextField nanyText;
    private javax.swing.JTextField roundText;
    // End of variables declaration//GEN-END:variables
}
